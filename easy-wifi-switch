#!/bin/sh

UCI="/sbin/uci"

# borrowed from /etc/init.d/handle_wifi_reset
set_or_delete() {
    key=$1
    value=$2
	
    if [ "x$value" == "x" ]
    then
	$UCI delete "$key"
    else
	$UCI set "$key=$value"
    fi
}

# check config exist
wificfg_a="/mnt/sda1/wifi.cfg"
wificfg_b="/mnt/sdb1/wifi.cfg"
cfg_load=false

# load config
if [ -f "$wificfg_a" ] ; then
    source "$wificfg_a"
    $cfg_load=true
fi

if [ -f "$wificfg_b" ] ; then
    source "$wificfg_b"
    $cfg_load=true
fi

if [ "$cfg_load" = true ] ; then
    # check if we are coming out of a self-induced reboot
    if [ -f /tmp/easy-wifi-switch-reboot ] ; then
	rm /tmp/easy-wifi-switch-reboot
	echo "all done!"
	exit 0
    fi

    # otherwise do the actual switching
    echo "Updating wifi settings:"
    echo " - SSID: $ssid"
    echo " - Key: $key"
    echo " - Encryption: $encryption"
    echo " "

    # apply to OpenWrt UCI
    # WIRELESS: see http://wiki.openwrt.org/doc/uci/wireless
    $UCI "set" "wireless.@wifi-device[0].channel=auto"

    $UCI "set" "wireless.@wifi-iface[0].mode=sta"
    $UCI "set" "wireless.@wifi-iface[0].ssid=$ssid"
    $UCI "set" "wireless.@wifi-iface[0].encryption=$encryption"
    $UCI "set" "wireless.@wifi-iface[0].key=$key"

    # NETWORK
    $UCI "delete" "network.lan.ipaddr"
    $UCI "delete" "network.lan.netmask"

    PROTO=`$UCI get "arduino.lan.proto"`
    set_or_delete "network.lan.proto" $PROTO

    # DHCP
    $UCI "delete" "dhcp.@dnsmasq[0].interface"
    $UCI "add_list" "dhcp.@dnsmasq[0].interface=lo"

    # ARDUINO
    $UCI "set" "arduino.@arduino[0].easy_wifi_switch_step=rebooting"

    # COMMIT
    $UCI commit

    # RESTART
    touch /tmp/easy-wifi-switch-reboot
    reboot
else
    echo "wifi.cfg was not found. Leaving wifi alone."
fi
